Jenkins
   automation tool 
What is Jenkins automating 
How do you use Jenkins for CI/CD automation
In Landmark, we manage federated JAVA based applications (web.ear) 
  for Fintech Clients
users/customers --------> [paymentApp/zelle/payPal]

Development--->Test+Build-->CodeQuality-->BackUp--->AppServers
1. Development---> [Git/GitHub,IDE]
     7 --- REPOSITORIES 
2. CodeQuality--->
3. Test+Build-->-->
4. BackUp--->
5. AppServers
6. Notification[email, slack]

users[]--->webServers/LB---->AppServers--->database

http://3.94.184.77:8080/ 

   https://github.com/LandmakTechnology/maven-web-apps
Project_PayPal_dev:

1. Jenkins-Github Integration:
  1. INSTALL GIT in Jenkins or 
     Configure git plugin in Jenkins
  2. Create credentials to access code in Guthub
     Jenkins should be authorised to clone/pull code from SCM [GitHub/GitLab]
          userName: LEGAH2045 
          Password/PAT : ghp_zyNBJtJDP54Uye0ji0SLAvbgSLe22Cp3KO

2. Jenkins-Maven integration: clean package
  1. go to  Manage Jenkins
       go to Global Tool Configuration
           maven3.8.4 

         choose maven version  maven  

  2. Build and invoke top maven target 

3. Jenkins SonarQube Integration;  mvn sonar:sonar :
  1. modify 'Properties' tag with SonarQube server details in  pom.xml
    vi pom.xml:
      <Property>
        <sonar.host.url>http://3.83.86.27:9000/</sonar.host.url>
    <sonar.login>class28</sonar.login>
    <sonar.password>admin</sonar.password>
      </Property>
 2. Open required ports (9000) in SonarQube server to allow traffic from jenkins server
 
    or Install and configure JaCoCo plugin in Jenkins UI

  Jenkins:
    git--test--build--CodeQuality-- 

    pom.xml 
       JUnits 
       selenium 
4. Jenkins/Maven Nexus Integration for java projects;
Jenkins Nexus Integration;  mvn deploy:
Upload build artifacts:
--------------------------------------
1. Create repos in nexus-UI to upload artifacts
    http://3.86.113.205:8888/repository/paypal-snapshots/
    http://3.86.113.205:8888/repository/paypal-releases/
      Building /var/lib/jenkins/  workspace/ebay-java-app

cd /var/lib/jenkins/tools/hudson.tasks.Maven_MavenInstallation/maven3.8.4 
vi /var/lib/jenkins/tools/hudson.tasks.Maven_MavenInstallation/maven3.8.4/conf/settings.xml


   2. modify 'distributionManagement' tag with nexus repos details  in  pom.xml
        vi pom.xml

             
   3. modify /maven/conf/setting.xml in maven (JENKINS) server with login credentials
        
         # vi /nexus/conf/setting.xml
            <server>
                <id>nexus</id>
                <username>admin</username>
                <password>admin123</password>
            </server> 
    4. Open required ports in Nexus server to allow traffic from jenkins server
         mvn deploy 



 JENKINS-TOMCAT INTEGRATION:
============================= 
1. INSTALL 'Deploy to container' Plugin on Jenkins UI
       JENKINS uses plugin to extend it functionality

2. ADD A TOMCAT USER in /tomcat9/conf/tomcat-users.xml 
   vi /tomcat9/conf/tomcat-users.xml 
   mylandmark landmark 

<user username="landmark" password="admin123" roles="manager-gui,admin-gui,manager-script"/>  
<user username="LandmarkTechology" password="admin123" roles="manager-gui,admin-gui"/>


JHD --- /var/lib/jenkins/

  http://18.207.210.70:8080/web-app 
  http://18.207.210.70:8080/web-app/

Build Triggers:
  Trigger builds remotely (e.g., from scripts)?
  Build after other projects are built?
     paypal_dev   job 
     paypal_uat   job 
     paypal_prod  job 
  Build periodically?
     * * * * *
  GitHub hook trigger for GITScm polling?
     http://3.94.184.77:8080/github-webhook
     http://3.93.65.210:8080/
     http://3.93.65.210:8080/github-webhook
  Poll SCM? Job is triggered only if the code changes 
     H * * * *
     git pull/push/clone

https://github.com/LandmakTechnology/web-app 
   dev 
   uat 
   PROD 
https://github.com/LandmakTechnology/paypal-web-app

Trigger a new build and identify updated files? : IQ

How did you configure Jenkins for email notification?
walk me through your Jenkins email notification Configuration?

  1. Email Notifications 
Configuring SMTP Server in Jenkins
----------------------------------
1. Log into Jenkins server UI  = http://18.212.53.48:8080/
   install email notification plugin - 
     Jenkins--> Manage-Jenkins-Manage-plugins
     1. Jenkins--> Manage-Jenkins-->Configure systems-->Editable Email and configure
     2. Configure email notification for required jobs:
  
  SMTP = simple mail transfer protocol servers
  smtp.gmail.com 
  paypal-project@gmail.com 
  admin@123
    receipients:
      all Developers 
      smtp ports = 25, 587 

Walk me through how build and deployment are effected in your projects?


         Continuous integration job: 
           Build and Release 
              Developers + Git/GitHub + Jenkins + maven + SonarQube + Nexus 
         Continuous Delivery job:  
           deployment with Manual approval   
             deploys in STAGING + 
                           Manual approval 
                                 deploys Production 
         Continuous monitoring:
Continuous deployment:
 Developers + Git/GitHub + Jenkins + maven + SonarQube + Nexus-->UAT---TEST->PROD 
                                                                       auto  
Continuous Delivery:
 Developers + Git/GitHub + Jenkins + maven + SonarQube + Nexus-->UAT---TEST---->PROD 
                                                                       Manual  
                                                                       sign 
Continuous monitoring:

What is the difference b/w Build Periodically and Poll SCM 
=================================================================
* * * * *  - Build Periodically - is triggered by timer 

* * * * *  - Poll SCM  - is triggered by  timer/Schedule & SCM change  

Maven projects:
  mvn sonar:sonar 
  mvn deploy 
      validate 
      compile 
      test 
      package 
      uploadArtifacts to Nexus  



Discard Old Build

Disable this project
    schedule Maintainance of servers 
    database backup 

 Delete workspace before build starts 

 Add timestamps to the Console Output 
    sudo timedatectl set-timezone America/New_York

 JaCoCo plugin
  java code coverage 

   80%

Plugins Management === Extends jenkins functions 
• JACOCO
• Deploy to container  --- 
    deploys applications in Tomcat/GlassFish/JBoss servers

• Deploy WebLogic
     deploys applications in WebLogic servers

• Maven Integration


• Safe Restart
    jobs are running 
      sudo systemctl restart jenkins
• Next Build Number
• Build Name Setter

• SSH Agent
• Email Extension
• SonarQube Scanner

• Audit Trail Plugin
    /var/lib/jenkins/
        audit-trail.log-0  5MB 
        audit-trail.log-1  5MB
        audit-trail.log-2  5MB 
        audit-trail.log-3 
        audit-trail.log-5

     NBC = 10 team members 
        simon 
        percy 
        mercy 
        florence

• Schedule Build

• Artifactory Plugin
• Cloud Foundry
• Blue Ocean
• Publish Over SSH
    jenkins --> ansible --deployment
• ThinBackup

• Convert To Pipeline

• Job import plugin 
    jenkins migration 

• Maven projects 
     25 mins 
  freestyle projects
     30 mins 

name="Simon" 
port=80 
variables:
  boolean variables
     Jenkins_installed=true
  intergers are numbers 
      port=80 
  float 
      price=100.50
  string variables 
     name='simon'
  list 
     team_numbers = ['simon','paul','john']
Build with parameters  :
  $Name 
  $branchName

JHD = Jenkins HOME DIRECTORY :
   /var/lib/jenkins 

 jobs 
   job 
     Config.xml/logs 
 workspace

 tools
    maven3.6.0  
    maven3.8.4

 plugins
 secrets

 users/users.xml 

td-dev

How to trouble issues with 
    jenkins serve
   /var/log/jenkins

sudo su - jenkins

sudo vi /etc/passwd 

http://18.212.53.48:5555/

18.212.53.48:8080/
http://18.212.53.48:8080/
Jenkins security:
 Changing default port 
 sudo vi /etc/sysconfig/jenkins     
    RHEL or CentOS
    hostnamectl
 sudo vi /etc/default/jenkins
    UBUNTU

open the new port number in the firewall (aws security group)
######################=================================
security Jenkins  :
  Changing jenkins default configurations (port number, JHD)
    JHD = /var/lib/jenkins 
          /app/jenkins 
  
  using a proxy (HAProxy) server to access jenkins 
     Team--> HAProxy/Nginx --> Jenkins 
  Maintaining a strong password Policy 
     special characters 
     expiry date 
     case sensitive (lower, upper letters)
     numbers

user mgt:
Team-TD
  2 developers -- ROLE -- LIMITED
      simon 
      Mercy
  2 devops engineers - ROLE -  admins  
      Hilma
      Abih 

RBAC:

password: admin123 
userName: LandmarkTechnology 
Password Policy 
  password: Land@2021#!w 

Using an LDAP server for user mgt 
      simon 
      Mercy
      Hilma
      Abih 
==================================
Jenkins Master slave achitecture:
Jenkins Master:
    Java 
    Jenkins
    SSH Agent Plugin 
       sshagent plugin must be installed:
    Executors = > 2    
    This is a Unix agent
    Evacuated stdout
    Agent successfully connected and online

Jenkins slaves/agents:
  java 

What does jenkins use to effect builds in Jenkins slaves/agents?
  jenkins Executors
  mvn package 
  agent1:
    hostIP = 172.31.87.34 
             54.205.71.127
    userName = ec2-user
    ssh_private_key = C27.pem
    password = Admin@123..54

Please Whats the advantage of Master -Slave?
  1. jenkins can Execute/run multiple tasks/jobs 
  2. It helps for backups and disaster recovery 
  3. It avoid a single point of failure   
Why and when do we need these architecture?

How many slave are connected to your Jenkins master server?  6

Jenkins Freestyle projects 
 mvn clean 
   run in slave2 

What are jenkins Executors?
  Are agents that permit tasks/jobs to run in jenkins slaves 

maven project :
  job ---> configure 

JENKINS Pipeline Projects  :
        IaC
Pipeline Project  : 
================
Jenkinsfile is a groovy script use to build jobs in Jenkins
bash shell script
1.Jenkins-Scripted-Pipeline:
=========================
1. Declarative 
     - It uses some gui options
     - Scripts

2. Scripted --> Groovy Script
     - No Gui options
     - ONLY SCRIPTS
Jenkinsfile --- Scripted
node{
   stage('1Clone'){
    git 'https://github.com/LandmakTechnology/paypal-web-app'
   }
   stage('2MavenBuild'){}
   stage('3CodeQuality'){

   }
   stage('4UploadArtifacts'){

   }
   stage('5Deployment'){

   }
   stage('EmailAlerts'){

   }
}  
    bin conf lib logs 

node{
  def mavenHome = tool name: 'maven3.8.4'
  stage('1Clone'){
    git branch: 'feature', credentialsId: 'Git_Credentials', url: 'https://github.com/LandmakTechnology/paypal-web-app'
  }
  stage('2MavenBuild'){
    sh "${mavenHome}/bin/mvn clean package"
   // bat 'mvn package'
  }
    stage('3CodeQuality'){
    sh "${mavenHome}/bin/mvn sonar:sonar"
  }
    stage('4UploadArtifacts'){
    sh "${mavenHome}/bin/mvn deploy"
  }
      stage('5.Deploy2dev'){
      deploy adapters: [tomcat9(credentialsId: 'Tomcat_Credentials', path: '', url: 'http://18.207.210.70:8080/')], contextPath: null, war: 'target/web-app.war'    
      http://18.207.210.70:8080/web-app/
  }
      stage('6.Deploy2uat'){
        sshagent(['agentcredentials']) {
}  
      }
     stage('7.approval'){
      timeout(time:8, unit:'HOURS'){
        input message: 'Please approve deployment to Production'
      }
     }
   stage('8.Deploy2prod'){
        sshagent(['agentcredentials']) {
        sh "scp -o StrictHostKeyChecking=no target/*.war ec2-user@172.31.89.218:/opt/tomcat9/webapps/app.war"
        
}      
      }

   stage('9.EmailAlerts'){
    emailext body: '''Hi

Build status for boa app.

Regards,
Landmark Technologies''', recipientProviders: [developers(), requestor()], subject: 'Project status', to: 'boa@gmail.com'
   
   }

}


Declarative: 70 
scripted: 30

 
Build and Release Engineer 

    ssh -o StrictHostKeyChecking=no 



  http://18.207.210.70:8080/web-app
  http://18.207.210.70:8080/uat/
  http://18.207.210.70:8080/app 



ssh -i "C27.pem" ec2-user@ec2-3-83-86-27.compute-1.amazonaws.com


ONE-ON-ONE Interview prep sessions
Focus: 
  Course Content review
  Interview reviews 
  Resume/CV review & Linkedin profiling
Days: Mon to Fridays 
Time: 6am - 8am EST

 Zoom Meeting
https://landmarkmetropolitanuniversity.zoom.us/j/88087392506?pwd=V3psajBnNTZGR2JLK3A2cHhJMFM1QT09

Meeting ID: 880 8739 2506
Passcode: 596718

freestyle
    ---GUI   
Pipeline 
    -- SCRIPT --- Groovy Script Jenkinsfile 
    -- scripted Pipeline Projects 
    -- Declarative Pipeline Projects
 
 Jenkinsfile is a Groovy Script
 Terraform script -- HCL 
Autamating the Build, test and deployment of applications via ci/cd   

scripted Pipeline Projects --- Jenkinsfile

node{
    def mavenHome = tool name: 'maven3.8.4'
  stage('1.clone'){
    sh "echo clonning the latest version of the code"
    sh "git clone https://github.com/LandmakTechnology/paypal-web-app"
  }
  stage('2.Test'){
    sh "${mavenHome}/bin/mvn test"
  }
  stage('3.Build'){
    sh "mvn clean package"
  }
  stage('4.Quality'){
        sh "mvn sonar:sonar"
  }
  stage('5.uploadArtifacts'){
        sh "mvn deploy"
  }
  stage('6.deploy2UAT'){
        sshagent(['agentcredentials']) {
        sh "scp -o StrictHostKeyChecking=no target/*.war ec2-user@172.31.89.218:/opt/tomcat9/webapps/app.war"

  }
  stage('7.RunMoreTests'){
    sh "echo performance testing in progress"
    sh "echo test failed"
  }
  stage('8.deploy2Produ'){
    sshagent(['agentcredentials']) {
    sh "scp -o StrictHostKeyChecking=no target/*.war ec2-user@172.31.89.218:/opt/tomcat9/webapps/app.war"

  }
  stage('9. EmailAlerts'){
    emailext body: '''Hi

Build status for boa app.

Regards,
Landmark Technologies''', recipientProviders: [developers(), requestor()], subject: 'Project status', to: 'boa@gmail.com'
   
  }
}

-- Declarative Pipeline Projects
https://github.com/LandmakTechnology/paypal-web-app

pipeline{
  agent any 
  tools{
    maven "maven3.8.4"
  }
  stages{
    stage('1.clone'){
      steps{
            sh "echo clonning the latest version of the code" 
            git branch: 'feature', credentialsId: 'Git_Credentials', url: 'https://github.com/LandmakTechnology/paypal-web-app'
            sh "echo clonning successful"
      }
    }
    stage('2.Build'){
      steps{
        sh "echo validation, compilation, testing and package"
        sh "echo testing successful and ready to package"
        sh "mvn clean package"
      }
    }
    stage('3.Quality'){
      steps{
        sh "echo performing code quality analysis"
        sh "echo code quality successful and ready to upload"
        sh "mvn sonar:sonar"
      }
    }
  stage('4.uploadArtifacts'){
      steps{
        sh "mvn deploy"
      }
    }
  stage('5.Deploy2UAT'){
      steps{
        sh "echo DEPLOYING TO UAT for further testing and validation"
        sshagent(['agentcredentials']) {
        sh "scp -o StrictHostKeyChecking=no target/*.war ec2-user@172.31.89.218:/opt/tomcat9/webapps/uatapp.war"
      }
    }
  } 
    stage('6.Deploy2Prod'){
      steps{
        sh "echo DEPLOYING application TO Production"
        timeout(time:8, unit:'HOURS'){
        input message: 'Please approve deployment to Production'
      }
        sshagent(['agentcredentials']) {
        sh "scp -o StrictHostKeyChecking=no target/*.war ec2-user@172.31.89.218:/opt/tomcat9/webapps/uatapp.war"
      }
    }
  }
  post{
    always{
      mail bcc: 'mylandmarktech@gmail.com', body: '''Success,

The build was great.

Regards
Landmark Technologies 
+14372152483''', cc: 'mylandmarktech@gmail.com', from: '', replyTo: '', subject: 'sucess', to: 'mylandmarktech@gmail.com'
    }
    success{
      mail bcc: 'mylandmarktech@gmail.com', body: '''Success,

The build was great.

Regards
Landmark Technologies 
+14372152483''', cc: 'mylandmarktech@gmail.com', from: '', replyTo: '', subject: 'sucess', to: 'mylandmarktech@gmail.com'
    }
    failure{
      mail bcc: 'mylandmarktech@gmail.com', body: '''Failed,

The build Failed.

Regards
Landmark Technologies 
+14372152483''', cc: 'mylandmarktech@gmail.com', from: '', replyTo: '', subject: 'Failed', to: 'mylandmarktech@gmail.com'
    }
  }

}

Multi branch pipeline project:
  dev ---> Development--- environment 
  stage  ---> UAT/Testing environment
  master ---> production 
    Feature 
    bug_fixed  

   Code-->Build-->  Test--     Deploy 
    git   maven   SonarQube    Tomcat

    secure Jenkins 
    http://18.212.53.48:5555/
      1. Using a proxy  to connect to jenkins 
             users/Admins  -->  Nginx  -->Jenkins
      2. Changing default settings (portNumber, JHD)  
      3. rbac / Project base security options 
      4. Jenkins LDAP integration for user mgt 

Pipelines:
Projects:
 boa 
   dev/qa/uat/prod  = 4 Jenkinsfile 
 td-BANK 
   dev/qa/uat/prod  = 4 Jenkinsfile 
 ebay 
   dev/qa/uat/prod  = 4 Jenkinsfile 
 alibaba 
   dev/qa/uat/prod  = 4 Jenkinsfile  
 Barclays 
   dev/qa/uat/prod  = 4 Jenkinsfile 

20 pipeline scripts for 20 jobs: 
   Avoid duplication in your code

Code --> Build -->  Test --> UploadArtifacts --> Deployment

node{
  stage('codePullGithub') {
    sh "echo start of project"
    sh "echo This is a java project for boa"
    git 'https://github.com/LandmakTechnology/web-app'
  }
  stage('Test+Build') {
    sh "echo building with maven"
    //sh "mvn validate" 
    //sh "mvn compile" 
    //sh "mvn test"
    sh "mvn package"
  }
  stage('CodeQualityReport') {
    sh "echo Running Code Quality Report analysis"
    sh "mvn sonar:sonar"
  }
  stage('UploadArtifacts') {
    sh "echo uploading artifacts in nexus"
    sh "mvn deploy"
  }
  stage('Development') {
    sh "echo app now ready for deployment"
    sh "scp app.war ec2-user@172.25.10.2:/opt/tomcat9/webapps/"
  }
  stage('Notification') {
    sh  "mail" 
    sh "echo slackchannel"
  }
}

buid
codeQuality 
UploadArtifacts 
deployment 
package (validates. compiles, test before packaging)
Jenkinsfile Shared Libraries:
  1. Create Shared Libraries in SCM [GitHub/GitLab]
  2. Configure Library in the Jenkins server 
       https://github.com/LandmakTechnology/JenkinsSharedLibraries
  3. use library in pipelines script 
     refer to the library in pipelines script

common.groovy
def call(String stageName){
  if ("${stageName}" == "Build")
     {
       sh "mvn clean package"
     }
  else if ("${stageName}" == "SonarQube Report")
     {
       sh "echo Running Code Quality Report analysis"
       sh "mvn clean sonar:sonar"
     }
  else if ("${stageName}" == "Upload Into Nexus")
     {
       sh "mvn clean deploy"
     }
}
----
Jenkinsfile
//@Library('LibraryName') _ 
// Declarative pipeline

@Library('LandmarkSS-sharedlibs') _
pipeline {
agent any 
tools {
    maven "maven3.8.4"
  }
stages{
stage('CheckoutCode'){
  steps{
    git 'https://github.com/LandmakTechnology/paypal-web-app'
}
}
stage("Build"){ 
  steps{
    common("Build")
}
}
stage("Execute SonarQube Report"){ 
  steps{
    common("SonarQube Report")
}
}
stage("Upload Artifacts Into Nexus"){ 
  steps{
    common("Upload Into Nexus")
}
}
}
}

21 hours 
1. 40 minutes nodeJS applications
2. 40 minutes videos NewRelic
3. 60 Resume lines  
Interview Questions and answers for Jenkins [1.40]
--------------------
Build & Release Engineer
35% is covered 
AWS  = 21 HOURS 

Cloud Engineer 
+ Docker and Kubernetes 60 HOURS  
SRE 
DevOps Engineer 
 + Ansible and Terraform  30 HOURS 
Sr. DevOps Engineer 
Platform Engineer 
Infrastructure 

Disposition 
  Professionalism 

Couple 
  Husband 25  
  Wife 26 ---

Landmark Technologies 
   Training 
Landmark Metropolita University
   Training 
Dominion systems USA 
   Work Experience + 

Landmark Technologies youtube 
Testimony :
  Public 
    Youmbi --- 10 months 
        1.8
    Fusi 
  unlisted 
    Paul 
      Paul now making
      https://youtu.be/Ryb0LM0hkmI
  private 
  

Declarative vs. scripted pipelines
In contrast to the scripted pipeline, the declarative Jenkins pipeline doesn't permit a developer to inject code. 
A Groovy script or a Java API reference in a declarative pipeline will cause a compilation failure.
While this restriction might sound limiting on the surface, it's not.

The Jenkins DSL provides a variety of facilities to introduce simple conditional logic.
 A declarative pipeline supports conditional statement usage, 
 allows access to environment variables and provides facilities to add logging and error handling. 
 The tradeoff is that declarative pipelines don't allow deep integration into Groovy and Java APIs.









pipeline{
  agent agent 
  tools{}
  triggers{} 
  stages{} 
  options{}
  post{
    always{}
    success{}
    failure{}
  }
}