a shell interpret command

cat /etc/shells: --- show all the shell availaible on your system

which bash: --- to see where bash is locate

touch : is use to create a file. the file has only the read and write permission not execute rwx

#! /bin/bash : is the first lign of a script, it help to know that we are programming using bash

chmod +x <filename> : give executable permission to a file

# :is use for single line comment

variables : are container that store date inside. it can be strings, number ...
   - system variables: create and maintain by linux. defines in capital case. Variable start with $
   - users define variable : define by normal user and can be in capital or lower case

exple system v:
echo Our shell name is $BASH
echo $BASH_VERSION
echo $HOME
echo $PWD

exple user def var: 
name=Mark
echo the is $name

Variable name should not start with a number. it will not be considered as a variable.

read : help to get input from the command. 
    The default variable when using read is REPLY. 
  exple:
  echo "Enter name"
  read name
  echo "Enter the name $name" 

read -p : allow to have the input on the same line
  example:
   read -p 'username : ' user_var
   echo "username : $user_var"

for password which need to be hide do :

   read -sp 'password : ' pass_var

to have input and save into an array do :
  
   echo "Enter name : "
   read -a names
   echo "Name : ${names[0]}, {names[1]} "

  
Passing an argument : whenever you pass and argument in bash shell is save in $1 $2 $3 $4
  $0 --- output the name of the script
  $1,$2 --- output the argumment name 

2nd method
  args=("$@")
  echo ${args[0]}  ${args[1]}  

 
  echo $@ to print all the argument

To print the number of argument :
   
   echo $#

  ===================================================== 
   If statement is used to evaluate some Conditions:
  =======================================================

     if [condition]
     then
        statement
     fi

    Exple:  
       count=10
       if [ $count -eq 9 ]
     then
        echo "condition is true"
     fi

================================================     
for script comparasion  with > < >= =< we use double (())
===============================================  

      count=10
       if (( $count =< 9 ))

     then
        echo "condition is true"
     fi

===========================================
for script with string comparaison !=, ==, 
========================================
if you use >= =< with string use [[ ]]  --- [[ $word =< "abc"]]

  word=abc
       if [ $word = "abc"]
     then
        echo "condition is true"
     fi

=================================
we can evaluate using if else elif
=================================

word=abc
       if [ $word = "abc"]
     then
        echo "condition is true"
      else 
        echo "condition is false"
     fi

word=abc
       if [ $word = "abc"]
     then
        echo "condition is true"
      elif [[ $word == "abc"]]
      then 
        echo "condition is false"
     fi

===================================================================================
Check for a file text operator: to check if a file exist or if the file is correct
====================================================================================

-e                      ===>   is use to enable the interpreter of the \

\c                      ===>  is use to keep the cursor on the same line
-e $file_name           ===> is use to see if the file exist or not
-f $file_name           ====> is use to see if the file exist or not and if the file is a regular file
-d $file_name           ===> is use to see if the director exist or not 
-s $file_name           ====> is use to check if the is empty or not
-r ,-w, -x $file_name   ===> is use to check if the file has a read, write execute permission

  exple: 
        echo -e "Enter the name of the file  : \c"
        read file_name

        if [ -e file_name ]
        then
          echo "$file_name exist"
        else
          echo "$file_name do not exit"
        fi 

======================================================
How to append to file which already exist
========================================================


 echo -e "Enter the name of the file  : \c"
        read file_name

        if [ -f file_name ]                                          # -f is if the file exist
        then
           if [ -w $file_name ]                                     # if the file have the right permission
           then
              echo "Type some text date. to quit press ctrl+d"
              cat >>  $file_name                                      # file will be append not overwrite
           else 
              echo "The file do not have write permission"
           fi
        else
          echo "$file_name  not exits"
        fi 

  This exple above is a nextted if condition because we have if else inside an if else Conditions:

 ====================================   
 Logical 'AND' operator   && 
 ===================================
To evaluate 2 condition we can use && or 
  we can replace && with -a 
evaluate age greater than 18 and less than 30

age=25

if [ "$age" -gt 18 ] && [ "$age" -lt 30 ]
then
  echo "valid age"
  else 
  echo "age not valid"
fi

  we can replace && with -a
  =========================

  age=25
echo "Enter your age :"
read age
# read -s age                         # -s will hide the number 

if [ "$age" -gt 18 -a "$age" -lt 30 ]
then
  echo "valid age"
  else 
  echo "age not valid"
fi


 we can use && inside [[ ]]
 ==============================

age=25

if [[ "$age" -gt 18 && "$age" -lt 30 ]]
then
  echo "valid age"
  else 
  echo "age not valid"
fi

==================================
 Logical 'OR' operator  ||
=====================================
if any of the condition is true it will give the valid answer

age=25
echo "Enter your age :"
read age

if [ "$age" -gt 18 ] || [ "$age" -lt 30 ]  #   [ "$age" -gt 18 -o "$age" -lt 30 ]        you can also use this 
                                           #    [[ "$age" -gt 18 || "$age" -lt 30 ]]
then
  echo "valid age"
  else 
  echo "age not valid"
fi

exple2:

age=25

if [ "$age" -eq 18 ] || [ "$age" -eq 30 ]
then
  echo "valid age"
  else 
  echo "age not valid"
fi

=====================================
Perform arythmatic operation
=======================================

num1=20
num2=5

echo $(( num1 + num2 ))
echo $(( num1 - num2 ))
echo $(( num1 * num2 ))
echo $(( num1 / num2 ))
echo $(( num1 % num2 ))  # it is use to specify the reminder from the calculation


# We can also use for arythmatic  "expr":
# when using expr we need to have only on parentheses

num1=20
num2=5

echo $( expr $num1 + $num2 )
echo $( expr $num1 - $num2 )
echo $( expr $num1 \* $num2 ) #    for * we need to use \* for the multiplication to be considered
echo $( expr $num1 / $num2 )
echo $( expr $num1 % $num2 )


# By default script doesn't support decimal number we need to use a special tool called bc= basic calculation

num1=20.5
num2=5
echo "20.5+5" | bc
echo "20.5-5" | bc
echo "20.5*5" | bc
echo "scale=20;20.5/5" | bc         # for division always use the scale option
echo "20.5%5" | bc

echo is use to specify the reminder from the calculation

echo "$num1+$num2" | bc
echo "$num1+$num2"  | bc
echo "$num1+$num2"  | bc
echo "scale=20;20.5/5" | bc         # for division always use the scale option
echo "20.5%5" | bc


##########################################################
####   Case statement 
####   it enables us to match several values againt one value 
####   Using case statement you can evaluate any pattern
##########################################################

     case expression in 
        pattern1 )
            statements ;;
        pattern2 )
            statements ;;
        ...
    esac


Exple:

    vehicle=$1       # $1 is the first argument enter when running the script
 
 case $vehicle in 
     "car" )
         echo "Rent of $vehicule is 100 dollar" ;;
     "van" )
         echo "Rent of $vehicule is 75 dollar" ;;
     "bicycle" )
         echo "Rent of $vehicule is 50 dollar" ;;
     "truck" )
         echo "Rent of $vehicule is 150 dollar" ;;
     * )
         echo "Unknown vehicule" ;;
 esac

 Exple2:
    

   echo -e "Enter some character : \c"
   read value
   
   case $value in 
     [a-z] )
         echo "User entered $value a to z" ;;
     [A-Z] )
         echo "User entered $value A to Z" ;;      # if you run this statement and it doesn't work run this environmental variable LANG=C 
     [0-9] )
         echo "User entered $value 0 to 9" ;;
     ? )                                                 # ? is use if user enter any special character
         echo "User entered $value special charater " ;;
     * )                                                 # * is used when user enter more than one character 
         echo "Unknown character" ;;
 esac


########################################################################
###   Array variables
###
########################################################################